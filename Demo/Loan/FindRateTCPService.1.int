ROUTINE Demo.Loan.FindRateTCPService.1 [Type=INT, Generated]
 ;Demo.Loan.FindRateTCPService.1
 ;(C)InterSystems, generated for class Demo.Loan.FindRateTCPService.  Do NOT edit. 06/25/2018 11:32:51AM
 ;;38745A54;Demo.Loan.FindRateTCPService
 ;
zGetRequestClassList() public {
 Quit $LB("Ens.StringContainer") }
zGetResponseClassList(pRequest="") public {
 If pRequest=""||(pRequest="Ens.StringContainer") Quit $LB("Ens.StringContainer")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "Demo.Loan.FindRateTCPService") {
		Set tRow = $case(pSettingName,
			"AlertGracePeriod": $LB("AlertGracePeriod","When AlertOnError is True, refrain from alerting if it is not from ProcessInput() and the Service succeeds again within this number of seconds","%Library.Numeric",0,"",0,"","","",0,"Alert Grace Period","Alerting","Alerting Control",""),
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the Ensemble I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"GenerateSuperSessionID": $LB("GenerateSuperSessionID","If this setting is enabled then generate a Super Session ID.<br>"_$char(13,10)_"See method GenerateSuperSession() and user call back method OnGenerateSuperSession()in <CLASS>Ens.Host</CLASS> ","%Library.Boolean",0,"","","","","",0,"Generate SuperSession ID","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zOnProcessInput(pInput,pOutput,pHint) public {
	If pInput.StringValue="" {
		Set pOutput=##class(Ens.StringContainer).%New("Please apply for a loan as follows - ""Amount:Name:TaxID:Nationality"" (or ""quit"" to quit)")
		Quit 1
	} ElseIf $ZCVT(pInput.StringValue,"L")="quit" {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnProcessInput","Disconnecting because of client request '"_$E(pInput.StringValue,1,32767-50)_"'")
		Do ..Adapter.Disconnect()
		Quit 1
	}
	Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("user",$classname(),"OnProcessInput","received line "_pInput.StringValue)
	Set tApplication = ##class(Demo.Loan.Msg.Application).%New()
	Set tSubject=pInput.StringValue
	Set tApplication.Amount=$p(tSubject,":",1)
	Set tApplication.Name=$p(tSubject,":",2)
	Set tApplication.TaxID=$p(tSubject,":",3)
	Set tApplication.Nationality=$p(tSubject,":",4)
	Set tApplication.BusinessOperationType="tcp"
	Set tApplication.Destination=""
	Set tSC=..SendRequestAsync("Demo.Loan.FindRateDecisionProcessBPL",tApplication)  Quit:('tSC) tSC
	Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("user",$classname(),"OnProcessInput","record number is "_tApplication.RecordNumber())
	Set pOutput=##class(Ens.StringContainer).%New(tApplication.GetRecordNumberText())
	Set tSendReply = ##class(Demo.Loan.Msg.SendReply).%New()
	Set tSendReply.Text=tApplication.GetRecordNumberText()
	Set tSendReply.Destination=""
	Set tSC=..SendRequestAsync("Demo.Loan.FindRateTCPOperation",tSendReply)
	Quit tSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","FindRateTCPService","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
