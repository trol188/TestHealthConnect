ROUTINE Demo.Loan.BankMetrics.1 [Type=INT, Generated]
 ;Demo.Loan.BankMetrics.1
 ;(C)InterSystems, generated for class Demo.Loan.BankMetrics.  Do NOT edit. 06/25/2018 11:32:50AM
 ;;79412B49;Demo.Loan.BankMetrics
 ;
%GetPropertyInfo(pInfo,pExtended=0) public {
 // Generated by Ens.BusinessMetric
 Set tSC = 1
 Set pInfo("%thresholdUpper") = $I(pInfo)
 Set pInfo("%thresholdLower") = $I(pInfo)
 Set pInfo("%rangeUpper") = $I(pInfo)
 Set pInfo("%rangeLower") = $I(pInfo)
 Set pInfo("LoansRequested") = $I(pInfo)
 Set pInfo("LoansApproved") = $I(pInfo)
 Quit tSC }
%NormalizeObject() public {
	If '$system.CLS.GetModified() Quit 1
	If m%%AlertStartTime Set:i%%AlertStartTime'="" i%%AlertStartTime=(..%AlertStartTimeNormalize(i%%AlertStartTime))
	If m%%ConfigName Set:i%%ConfigName'="" i%%ConfigName=(..%ConfigNameNormalize(i%%ConfigName))
	If m%%ConfigQueueName Set:i%%ConfigQueueName'="" i%%ConfigQueueName=(..%ConfigQueueNameNormalize(i%%ConfigQueueName))
	If m%%Instance Set:i%%Instance'="" i%%Instance=(..%InstanceNormalize(i%%Instance))
	If m%%LastActionTime Set:i%%LastActionTime'="" i%%LastActionTime=(..%LastActionTimeNormalize(i%%LastActionTime))
	If m%%LastHandledTime Set:i%%LastHandledTime'="" i%%LastHandledTime=(..%LastHandledTimeNormalize(i%%LastHandledTime))
	If m%%LastReportedError Set:i%%LastReportedError'="" i%%LastReportedError=(..%LastReportedErrorNormalize(i%%LastReportedError))
	If m%%OutsideCreated Set:i%%OutsideCreated'="" i%%OutsideCreated=(..%OutsideCreatedNormalize(i%%OutsideCreated))
	If m%%PreserveSession Set:i%%PreserveSession'="" i%%PreserveSession=(..%PreserveSessionNormalize(i%%PreserveSession))
	If m%%QuitTask Set:i%%QuitTask'="" i%%QuitTask=(..%QuitTaskNormalize(i%%QuitTask))
	If m%%SessionId Set:i%%SessionId'="" i%%SessionId=(..%SessionIdNormalize(i%%SessionId))
	If m%%SuperSession Set:i%%SuperSession'="" i%%SuperSession=(..%SuperSessionNormalize(i%%SuperSession))
	If m%%SuperSessionCreatedBeforeSession Set:i%%SuperSessionCreatedBeforeSession'="" i%%SuperSessionCreatedBeforeSession=(..%SuperSessionCreatedBeforeSessionNormalize(i%%SuperSessionCreatedBeforeSession))
	If m%%WaitForNextCallInterval Set:i%%WaitForNextCallInterval'="" i%%WaitForNextCallInterval=(..%WaitForNextCallIntervalNormalize(i%%WaitForNextCallInterval))
	If m%%WarnedLatest Set:i%%WarnedLatest'="" i%%WarnedLatest=(..%WarnedLatestNormalize(i%%WarnedLatest))
	If m%%isShadow Set:i%%isShadow'="" i%%isShadow=(..%isShadowNormalize(i%%isShadow))
	If m%%rangeLower Set:i%%rangeLower'="" i%%rangeLower=(..%rangeLowerNormalize(i%%rangeLower))
	If m%%rangeUpper Set:i%%rangeUpper'="" i%%rangeUpper=(..%rangeUpperNormalize(i%%rangeUpper))
	If m%%thresholdLower Set:i%%thresholdLower'="" i%%thresholdLower=(..%thresholdLowerNormalize(i%%thresholdLower))
	If m%%thresholdUpper Set:i%%thresholdUpper'="" i%%thresholdUpper=(..%thresholdUpperNormalize(i%%thresholdUpper))
	If m%AlertGracePeriod Set:i%AlertGracePeriod'="" i%AlertGracePeriod=(..AlertGracePeriodNormalize(i%AlertGracePeriod))
	If m%AlertGroups Set:i%AlertGroups'="" i%AlertGroups=(..AlertGroupsNormalize(i%AlertGroups))
	If m%AlertOnError Set:i%AlertOnError'="" i%AlertOnError=(..AlertOnErrorNormalize(i%AlertOnError))
	If m%ArchiveIO Set:i%ArchiveIO'="" i%ArchiveIO=(..ArchiveIONormalize(i%ArchiveIO))
	If m%BusinessPartner Set:i%BusinessPartner'="" i%BusinessPartner=(..BusinessPartnerNormalize(i%BusinessPartner))
	If m%GenerateSuperSessionID Set:i%GenerateSuperSessionID'="" i%GenerateSuperSessionID=(..GenerateSuperSessionIDNormalize(i%GenerateSuperSessionID))
	If m%InactivityTimeout Set:i%InactivityTimeout'="" i%InactivityTimeout=(..InactivityTimeoutNormalize(i%InactivityTimeout))
	If m%LoansApproved Set:i%LoansApproved'="" i%LoansApproved=(..LoansApprovedNormalize(i%LoansApproved))
	If m%LoansRequested Set:i%LoansRequested'="" i%LoansRequested=(..LoansRequestedNormalize(i%LoansRequested))
	If m%ThrottleDelay Set:i%ThrottleDelay'="" i%ThrottleDelay=(..ThrottleDelayNormalize(i%ThrottleDelay))
	Quit 1 }
%ValidateObject(force=0,checkserial=1) public {
	set sc=1
	If '$system.CLS.GetModified() Quit sc
	If m%%AlertStartTime Set iv=..%AlertStartTime If iv'="" Set rc=(..%AlertStartTimeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%AlertStartTime",iv)
	If m%%ConfigName Set iv=..%ConfigName If iv'="" Set rc=(..%ConfigNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%ConfigName",iv)
	If m%%ConfigQueueName Set iv=..%ConfigQueueName If iv'="" Set rc=(..%ConfigQueueNameIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%ConfigQueueName",iv)
	If m%%Instance Set iv=..%Instance If iv'="" Set rc=(..%InstanceIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%Instance",iv)
	If m%%LastActionTime Set iv=..%LastActionTime If iv'="" Set rc=(..%LastActionTimeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%LastActionTime",iv)
	If m%%LastHandledTime Set iv=..%LastHandledTime If iv'="" Set rc=(..%LastHandledTimeIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%LastHandledTime",iv)
	If m%%LastReportedError Set iv=..%LastReportedError If iv'="" Set rc=(..%LastReportedErrorIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%LastReportedError",iv)
	If m%%OutsideCreated Set iv=..%OutsideCreated If iv'="" Set rc=(..%OutsideCreatedIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%OutsideCreated",iv)
	If m%%PreserveSession Set iv=..%PreserveSession If iv'="" Set rc=(..%PreserveSessionIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%PreserveSession",iv)
	If m%%ProcessError Set iv=..%ProcessError If iv'="" Set rc=(..%ProcessErrorIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%ProcessError",iv)
	If m%%QuitTask Set iv=..%QuitTask If iv'="" Set rc=(..%QuitTaskIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%QuitTask",iv)
	If m%%SessionId Set iv=..%SessionId If iv'="" Set rc=(..%SessionIdIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%SessionId",iv)
	If m%%SuperSession Set iv=..%SuperSession If iv'="" Set rc=(..%SuperSessionIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%SuperSession",iv)
	If m%%SuperSessionCreatedBeforeSession Set iv=..%SuperSessionCreatedBeforeSession If iv'="" Set rc=(..%SuperSessionCreatedBeforeSessionIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%SuperSessionCreatedBeforeSession",iv)
	If m%%WaitForNextCallInterval Set iv=..%WaitForNextCallInterval If iv'="" Set rc=(..%WaitForNextCallIntervalIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%WaitForNextCallInterval",iv)
	If m%%WarnedLatest Set iv=..%WarnedLatest If iv'="" Set rc=(..%WarnedLatestIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%WarnedLatest",iv)
	If m%%isShadow Set iv=..%isShadow If iv'="" Set rc=(..%isShadowIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%isShadow",iv)
	If m%%rangeLower Set iv=..%rangeLower If iv'="" Set rc=(..%rangeLowerIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%rangeLower",iv)
	If m%%rangeUpper Set iv=..%rangeUpper If iv'="" Set rc=(..%rangeUpperIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%rangeUpper",iv)
	If m%%thresholdLower Set iv=..%thresholdLower If iv'="" Set rc=(..%thresholdLowerIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%thresholdLower",iv)
	If m%%thresholdUpper Set iv=..%thresholdUpper If iv'="" Set rc=(..%thresholdUpperIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"%thresholdUpper",iv)
	If m%AlertGracePeriod Set iv=..AlertGracePeriod If iv'="" Set rc=(..AlertGracePeriodIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"AlertGracePeriod",iv)
	If m%AlertGroups Set iv=..AlertGroups If iv'="" Set rc=(..AlertGroupsIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"AlertGroups",iv)
	If m%AlertOnError Set iv=..AlertOnError If iv'="" Set rc=(..AlertOnErrorIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"AlertOnError",iv)
	If m%ArchiveIO Set iv=..ArchiveIO If iv'="" Set rc=(..ArchiveIOIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ArchiveIO",iv)
	If m%BusinessPartner Set iv=..BusinessPartner If iv'="" Set rc=(..BusinessPartnerIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"BusinessPartner",iv)
	If m%GenerateSuperSessionID Set iv=..GenerateSuperSessionID If iv'="" Set rc=(..GenerateSuperSessionIDIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"GenerateSuperSessionID",iv)
	If m%InactivityTimeout Set iv=..InactivityTimeout If iv'="" Set rc=(..InactivityTimeoutIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"InactivityTimeout",iv)
	If m%LoansApproved Set iv=..LoansApproved If iv'="" Set rc=(..LoansApprovedIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"LoansApproved",iv)
	If m%LoansRequested Set iv=..LoansRequested If iv'="" Set rc=(..LoansRequestedIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"LoansRequested",iv)
	If m%ThrottleDelay Set iv=..ThrottleDelay If iv'="" Set rc=(..ThrottleDelayIsValid(iv)) If ('rc) Set sc=$$EmbedErr^%occSystem(sc,rc,5802,"ThrottleDelay",iv)
	Quit sc }
zCalculateInstanceMetrics(pInstance) public {
	Set tSC=1, ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%IsRunning") = 1
	Lock +(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance)):$zu(115,4)
	If $Test {
		Set ..%rangeLower = $G(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%rangeLower"))
		Set ..%rangeUpper = $G(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%rangeUpper"))
		Set ..%thresholdLower = $G(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%thresholdLower"))
		Set ..%thresholdUpper = $G(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%thresholdUpper"))
		Set ..LoansApproved = $G(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"LoansApproved"))
		Set ..LoansRequested = $G(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"LoansRequested"))
		Set ..%Instance = pInstance
		Try {
			Set tSC = ..OnCalculateMetrics()
			Quit:('tSC)
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%rangeLower") = ..%rangeLower
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%rangeUpper") = ..%rangeUpper
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%thresholdLower") = ..%thresholdLower
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%thresholdUpper") = ..%thresholdUpper
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"LoansApproved") = ..LoansApproved
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"LoansRequested") = ..LoansRequested
			Set ^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance,"%LastUpdate") = ##class(Ens.DataType.UTC).LogicalToOdbc($zdatetime($ztimestamp,3,,3))
		} Catch e {Set tSC=e.AsStatus()}
		Lock -(^CacheTemp.EnsMetrics($namespace,..%ConfigName,pInstance))
	}
	Set %Ensemble("Metrics",..%ConfigName)=1
	Quit tSC }
zEvalInitialExpression(pPropName) [ tValue ] public {
	Set $ZT="Trap"
    Set tValue=$Case(pPropName,
                     "%%OID":"",
                     "%AlertStartTime":0,
                     "%ConfigName":"",
                     "%ConfigQueueName":"",
                     "%Instance":"",
                     "%LastActionTime":"",
                     "%LastHandledTime":"",
                     "%LastReportedError":"",
                     "%OutsideCreated":"",
                     "%PreserveSession":0,
                     "%ProcessError":"",
                     "%ProcessInputCalled":"",
                     "%QuitTask":0,
                     "%RequestHeader":"",
                     "%SessionId":"",
                     "%SuperSession":"",
                     "%SuperSessionCreatedBeforeSession":0,
                     "%WaitForNextCallInterval":1,
                     "%WarnedLatest":0,
                     "%isShadow":"",
                     "%rangeLower":"",
                     "%rangeUpper":"",
                     "%thresholdLower":"",
                     "%thresholdUpper":"",
                     "Adapter":"",
                     "AlertGracePeriod":0,
                     "AlertGroups":"",
                     "AlertOnError":0,
                     "ArchiveIO":0,
                     "BusinessPartner":"",
                     "GenerateSuperSessionID":0,
                     "IOLogEntry":"",
                     "InactivityTimeout":0,
                     "LoansApproved":"",
                     "LoansRequested":"",
                     "ThrottleDelay":0,
                     :"")
Exit
	Quit tValue
Trap
 	Set $ZT="",tValue=""
	Goto Exit }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "Demo.Loan.BankMetrics") {
		Set tRow = $case(pSettingName,
			"AlertGracePeriod": $LB("AlertGracePeriod","When AlertOnError is True, refrain from alerting if it is not from ProcessInput() and the Service succeeds again within this number of seconds","%Library.Numeric",0,"",0,"","","",0,"Alert Grace Period","Alerting","Alerting Control",""),
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the Ensemble I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"GenerateSuperSessionID": $LB("GenerateSuperSessionID","If this setting is enabled then generate a Super Session ID.<br>"_$char(13,10)_"See method GenerateSuperSession() and user call back method OnGenerateSuperSession()in <CLASS>Ens.Host</CLASS> ","%Library.Boolean",0,"","","","","",0,"Generate SuperSession ID","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zOnCalculateMetrics() [ SQLCODE,count ] public { New %ROWCOUNT,%ROWID,%msg,SQLCODE,count 
	// Note: these calculations are not accurate, they 
	// are demonstrative.
	// set the values of our metrics
	 ;---&sql(SELECT COUNT(*) INTO :count
 	 ;---		 FROM Demo_Loan_Msg.Application)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, count
	do %0Ao
	Set ..LoansRequested = count
	// set the values of our metrics
	 ;---&sql(SELECT COUNT(*) INTO :count 
 	 ;---		 FROM Demo_Loan_Msg.Approval
 	 ;---		 WHERE IsApproved = 1)
 	 ;--- ** SQL PUBLIC Variables: %ROWCOUNT, %ROWID, %msg, SQLCODE, count
	do %0Co
	Set ..LoansApproved = count
	Quit 1 }
 q
%0Ao n sqldata5d,sqldata8d,sqldata4d
 s $zt="%0Aerr"
 n %sqltime s %sqltime=$zh
 s sqldata5d=$zu(115,2)
 d:$zu(115,15) $system.ECP.Sync()
 s SQLCODE=100
 s count=0
 ; asl MOD# 2
 s count=0
 d %0AmCMod
 ; asl MOD# 4
 s SQLCODE=0 g %0Ac
%0AmDdun 
%0AmBdun 
%0AmAdun 
%0Ac s %ROWCOUNT='SQLCODE
 s:$d(%sqltime) sqldata8d=$g(sqldata8d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata8d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"UY8ml7BeSa90XwRQfu1k2hMbjU0="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"UY8ml7BeSa90XwRQfu1k2hMbjU0=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Aerr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Ac
%0AmCMod ; asl MOD# 3
 s sqldata4d=""
%0AmCk1 s sqldata4d=$o(^Ens.MessageBodyD(sqldata4d))
 i sqldata4d="" g %0AmCdun
 i $lg($g(^Ens.MessageBodyD(sqldata4d)),1)'[($e($lg($g(^Ens.MessageBodyD(sqldata4d)),1))_"Demo.Loan.Msg.Application"_$e($lg($g(^Ens.MessageBodyD(sqldata4d)),1))) g %0AmCk1
 i $i(count) { }
 g %0AmCk1
%0AmCdun q
%0Co n sqldata7d,sqldata10d,sqldata11d,sqldata4d,sqldata6d,sqldata3d
 s $zt="%0Cerr"
 n %sqltime s %sqltime=$zh
 s sqldata7d=$zu(115,2)
 d:$zu(115,15) $system.ECP.Sync()
 s sqldata4d=1,sqldata4d=$s($isvalidnum(sqldata4d):+sqldata4d,1:sqldata4d)
 s SQLCODE=100
 s count=0
 d %0CmBMod
 ; asl MOD# 4
 s SQLCODE=0 g %0Cc
%0CmDdun 
%0CmAdun 
%0Cc s %ROWCOUNT='SQLCODE
 s:$d(%sqltime) sqldata11d=$g(sqldata11d)+$zh-%sqltime
 n context,tmp,count,total,mean s context=$system.Context.SQL()
 if $d(sqldata11d,%sqltime) {
 if $g(context.Stats)<$zu(99) { d AggregateStats^%SYS.SQLSRV() }
 s tmp=$g(context.Stats($namespace,"lGQANbCTR48sQRtHEC9hdM/1DV4="))
 s count=$lg(tmp,1),total=$lg(tmp,2),mean=total+%sqltime/(count+1)
 s context.Stats($namespace,"lGQANbCTR48sQRtHEC9hdM/1DV4=")=$lb(count+1,total+%sqltime,$s(+count=0:0,1:(%sqltime-mean)**2+(count*((total/count-mean)**2+$lg(tmp,3)))/(count+1))) }
 q
%0Cerr s $zt=""
 d SQLRunTimeError^%apiSQL($ze,.SQLCODE,.%msg)
 g %0Cc
%0CmBMod ; asl MOD# 2
 s sqldata6d=""
%0CmBk1 s sqldata6d=$o(^Ens.MessageBodyD(sqldata6d))
 i sqldata6d="" g %0CmBdun
 i $lg($g(^Ens.MessageBodyD(sqldata6d)),1)'[($e($lg($g(^Ens.MessageBodyD(sqldata6d)),1))_"Demo.Loan.Msg.Approval"_$e($lg($g(^Ens.MessageBodyD(sqldata6d)),1))) g %0CmBk1
 s sqldata10d=$g(^Ens.MessageBodyD(sqldata6d,"Approval"))
 Set sqldata3d=$lg(sqldata10d,3)
 g:'(sqldata3d=sqldata4d) %0CmBk1
 g:'(sqldata3d'="") %0CmBk1
 ; asl MOD# 3
%0CmCdun i $i(count) { }
 g %0CmBk1
%0CmBdun q
%rangeUpperIsValid(%val) public {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,,):1,1:$$Error^%apiOBJ(5802,$classname()_":%rangeUpper",%val)) }
%thresholdLowerIsValid(%val) public {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,,):1,1:$$Error^%apiOBJ(5802,$classname()_":%thresholdLower",%val)) }
%thresholdUpperIsValid(%val) public {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,,):1,1:$$Error^%apiOBJ(5802,$classname()_":%thresholdUpper",%val)) }
zLoansApprovedDisplayToLogical(%val) public {
	Quit $select(%val="":"",$zu(115,13)&&(%val=$c(0)):"",1:+$in(%val,"",%val)) }
zLoansApprovedIsValid(%val) public {
	Quit $select($zu(115,13)&&(%val=$c(0)):1,$isvalidnum(%val,,,):1,1:$$Error^%apiOBJ(5802,$classname()_":LoansApproved",%val)) }
zLoansApprovedLink() public {
	Quit ""
}
zLoansApprovedLogicalToDisplay(%val) public {
	Quit $s(%val="":"",1:$fn(%val,"")) }
zLoansApprovedNormalize(%val) public {
	Quit $select($zu(115,13)&&(%val=$c(0)):"",1:$decimal(%val)) }
zLoansApprovedPoints() public {
	Quit 0
}
zLoansApprovedRangeLower() public {
	Quit 0
}
zLoansApprovedRangeUpper() public {
	Quit 10000
}
zLoansApprovedThresholdLower() public {
	Quit 0
}
zLoansApprovedThresholdUpper() public {
	Quit 100
}
zLoansApprovedUnits() public {
	Quit "Applications"
}
zLoansRequestedLink() public {
	Quit ""
}
zLoansRequestedPoints() public {
	Quit 0
}
zLoansRequestedRangeLower() public {
	Quit 0
}
zLoansRequestedRangeUpper() public {
	Quit 10000
}
zLoansRequestedThresholdLower() public {
	Quit 0
}
zLoansRequestedThresholdUpper() public {
	Quit 100
}
zLoansRequestedUnits() public {
	Quit "Applications"
}
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","BankMetrics","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
