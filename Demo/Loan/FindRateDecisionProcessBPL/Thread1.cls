Include 

/// This class is generated by the Demo.Loan.FindRateDecisionProcessBPL BPL class.
/// This class should not be edited or modified in any way.
/// Do not make direct use of this class in your application.
Class Demo.Loan.FindRateDecisionProcessBPL.Thread1 Extends Ens.BP.Thread [ ClassType = persistent, CompileAfter = Demo.Loan.FindRateDecisionProcessBPL, GeneratedBy = Ens.BPL.Compiler.CLS ]
{

Method S1(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","Demo.Loan.FindRateDecisionProcessBPL","S1","received application for "_request.Name)
 #; --- Begin Call BankUS ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse1","Demo.Loan.BankUS",callrequest,"BankUS",1,0,"BankUS",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankUS ---
 #; --- Begin Call BankSoprano ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse2","Demo.Loan.BankSoprano",callrequest,"BankSoprano",1,0,"BankSoprano",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankSoprano ---
 #; --- Begin Call BankManana ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse3","Demo.Loan.BankManana",callrequest,"BankManana",1,0,"BankManana",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankManana ---
 #; --- Begin Call BankEven ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.Application).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest=request
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("OnResponse4","Demo.Loan.BankEven",callrequest,"BankEven",1,0,"BankEven",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call BankEven ---
 Do ..%PendingResponses.Clear(),..%SyncResponses.Clear()
 Set ..%SyncTimedOut=0,..%PendingTimeout="",..%PendingAlarmHandle="",..%SyncName=""
 If ..%Process.IsResponsePending("BankUS") Do ..%PendingResponses.SetAt("","BankUS")
 If ..%Process.IsResponsePending("BankSoprano") Do ..%PendingResponses.SetAt("","BankSoprano")
 If ..%Process.IsResponsePending("BankManana") Do ..%PendingResponses.SetAt("","BankManana")
 If ..%Process.IsResponsePending("BankEven") Do ..%PendingResponses.SetAt("","BankEven")
 If ..%PendingResponses.Count()>0 {
    Set %name="",%alarmhandle=""
    Set status=..%Process.MakeTimerCall("_Timeout",.%name,5,"BankUS,BankSoprano,BankManana,BankEven",.%alarmhandle,"Wait for Banks")
    If $$$ISERR(status) Quit
    Do ..%PendingResponses.SetAt("",%name) Set ..%PendingTimeout=%name,..%PendingAlarmHandle=%alarmhandle,..%SyncName="Wait for Banks"
 }
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S1") Goto Exit
}

Method S10(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.BankName=context.ThisResult.BankName
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.IsApproved=context.ThisResult.IsApproved
 If $$$ISERR(status) Quit
 Set status=$$$OK,context.InterestRate=context.ThisResult.InterestRate
 If $$$ISERR(status) Quit
 Set ..%NextState="S9"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S10") Goto Exit
}

Method S11(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","Demo.Loan.FindRateDecisionProcessBPL","S11","application is "_$s(context.IsApproved:"approved for "_context.InterestRate_"% by "_context.BankName,1:"denied"))
 Do process.ClearAllPendingResponses()
 Set ..%NextState="Stop"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S11") Goto Exit
}

Method S12(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Demo.Loan.FindRateEMailOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S12") Goto Exit
}

Method S13(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Demo.Loan.FindRateFileOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S13") Goto Exit
}

Method S14(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","My Terminal Output",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S14") Goto Exit
}

Method S15(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Demo.Loan.FindRateTCPOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S15") Goto Exit
}

Method S16(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Demo.Loan.FindRateMSMQOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S16") Goto Exit
}

Method S17(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 #; --- Begin Call SendApproval ---
 #; --- Begin Request ---
 Set callrequest=##class(Demo.Loan.Msg.SendReply).%New()
 If '$IsObject(callrequest) Set status=%objlasterror Quit
 Set status=$$$OK,callrequest.Text=process.GetText(context)
 If $$$ISERR(status) Quit
 Set status=$$$OK,callrequest.Destination=request.Destination
 If $$$ISERR(status) Quit
 Set status=..MakeAsyncCall("","Demo.Loan.FindRateMQSeriesOperation",callrequest,"SendApproval",0,0,"SendApproval",0)
 If $$$ISERR(status) Quit
 Kill callrequest
 #; --- End Request ---
 #; --- End Call SendApproval ---
 Set ..%NextState="S11"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S17") Goto Exit
}

Method S2(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If ..%PendingResponses.Count()=0 {
    Set ..%NextState="S3"
 } else {
    Set ..%NextState="S2",..%Wait=1
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S2") Goto Exit
}

Method S3(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Do ##class(Ens.Util.Trace).WriteTrace("user","Demo.Loan.FindRateDecisionProcessBPL","S3","sync complete")
 Set context.Iterator="",..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S3") Goto Exit
}

Method S4(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set context.Iterator=context.TheResults.Next(context.Iterator)
 If context.Iterator="" {
  Set ..%NextState="S6"
 } else {
  Set ..%NextState="S5"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S4") Goto Exit
}

Method S5(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set status=$$$OK,context.ThisResult=context.TheResults.GetAt(context.Iterator)
 If $$$ISERR(status) Quit
 Do ##class(Ens.Util.Trace).WriteTrace("user","Demo.Loan.FindRateDecisionProcessBPL","S5","processing reply from "_context.ThisResult.BankName)
 If (context.ThisResult.IsApproved) {
 Set ..%NextState="S8"
 } else {
 Set ..%NextState="S7"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S5") Goto Exit
}

Method S6(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (request.BusinessOperationType="mail") {
 Set ..%NextState="S12"
 } elseif (request.BusinessOperationType="file") {
 Set ..%NextState="S13"
 } elseif (request.BusinessOperationType="term") {
 Set ..%NextState="S14"
 } elseif (request.BusinessOperationType="tcp") {
 Set ..%NextState="S15"
 } elseif (request.BusinessOperationType="msmq") {
 Set ..%NextState="S16"
 } elseif (request.BusinessOperationType="mqseries") {
 Set ..%NextState="S17"
 } else {
 Set ..%NextState="S11"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S6") Goto Exit
}

Method S7(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S4"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S7") Goto Exit
}

Method S8(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 If (('context.IsApproved)||(context.InterestRate>context.ThisResult.InterestRate)) {
 Set ..%NextState="S10"
 } else {
 Set ..%NextState="S9"
 }
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S8") Goto Exit
}

Method S9(process As Ens.BusinessProcess, context As Ens.BP.Context, synctimedout As %Boolean, syncresponses As %ArrayOfObjects(ELEMENTTYPE="%Library.Persistent"), request As %Library.Persistent, response As %Library.Persistent) As %Status [ Language = cache, PublicList = (process, context) ]
{
 Set $ZT="Trap",status=$$$OK do {
 Set ..%NextState="S7"
 } while (0)
Exit Quit ..ManageState(status)
Trap Set $ZT="",status=..ManageStatus(status,"S9") Goto Exit
}

Storage Default
{
<Type>%Library.CacheStorage</Type>
}

}

