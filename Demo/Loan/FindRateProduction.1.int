ROUTINE Demo.Loan.FindRateProduction.1 [Type=INT, Generated]
 ;Demo.Loan.FindRateProduction.1
 ;(C)InterSystems, generated for class Demo.Loan.FindRateProduction.  Do NOT edit. 06/25/2018 11:32:51AM
 ;;685A3135;Demo.Loan.FindRateProduction
 ;
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "Demo.Loan.FindRateProduction") {
		Set tRow = $case(pSettingName,
			"AlertActionWindow": $LB("AlertActionWindow","The default number of minutes within which a Managed Alert should be acted upon.","%Library.Integer",##class(Ens.Alerting.Utils).#DEFAULTACTIONWINDOW,"","","","","",0,"Alert Action Window","Alerting","Alerting Control",""),
			"AlertNotificationManager": $LB("AlertNotificationManager","The default Alert Notification Manager for use by the Managed Alert framework.","Ens.DataType.ConfigName","",128,"","","","",0,"Alert Notification Manager","Alerting","Alerting Control","selector?context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId}"),
			"AlertNotificationOperation": $LB("AlertNotificationOperation","The default Alert Notification Operation for use by the Managed Alert framework."_$char(13,10)_"The Notification Manager can be configured to send notifications to other hosts within the production,"_$char(13,10)_"but this setting provides a fallback for situations which are not captured by the logic in the Notification Manager.","Ens.DataType.ConfigName","",128,"","","","",0,"Alert Notification Operation","Alerting","Alerting Control","selector?context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId}"),
			"AlertNotificationRecipients": $LB("AlertNotificationRecipients","A comma-separated list of recipients that should be used for alert notifications"_$char(13,10)_"when no other recipients have been specified by the notification framework.","%Library.String","",2048,"","","","",0,"Alert Notification Recipients","Alerting","Alerting Control",""),
			"ShutdownTimeout": $LB("ShutdownTimeout","Amount of time to wait for a click on Stop Production to succeed","%Library.Numeric",120,"","","","","",0,"Shutdown Timeout","Additional","Additional Settings",""),
			"UpdateTimeout": $LB("UpdateTimeout","Amount of time to wait for Production updates to succeed <br>"_$char(13,10)_"This means both clicking UpdateProduction and clicking Apply for changes to a configuration item in a running production.","%Library.Numeric",10,"","","","","",0,"Update Timeout","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zRandomRequest() public {
	Set tAmount=($r(1000)+1)*1000
	Set tName=##class(%Library.PopulateUtils).Name()
	Set tTaxID=##class(%Library.PopulateUtils).SSN()
	Set tNationality=$p("USA,USA,UK",",",$r(3)+1)
	Quit tAmount_":"_tName_":"_tTaxID_":"_tNationality }
zSendMQSeries(pApplication,pQueue) public {
	Set base=##class(EnsLib.MQSeries.Base).%New()
	Set tSC=base.Initialize("QM_dave","S_davem/TCP/127.0.0.1(1414)")
	Set tSC=base.OpenQueue(pQueue,"MQOO_OUTPUT")
	Set msg=base.CreateMessage(.tSC)
	Set msg.Body="Loan application:"_pApplication_$c(13,10)_"The body is not used for the application purposes"
	Do base.SendMessage(msg)
	Do base.CloseQueue()
	Set base=""
	Quit }
zSendMSMQ(pApplication,pQueue) public {
	Set qinfo=##class(Activate.MSMQ.MSMQQueueInfo).%New()
	If qinfo="" Write "Failed to create MSMQQueueInfo",! Quit
	Set qinfo.PathName=pQueue
	Set qpub=qinfo.Open(2, 0)
	Set msg=##class(Activate.MSMQ.MSMQMessage).%New()
	Set msg.Label="Loan application:"_pApplication
	Set msg.Body="The body is not used for the application purposes"
	Do msg.Send(qpub)
	Do qpub.Close()
	Set qinfo=##class(Activate.MSMQ.MSMQQueueInfo).%New()
	If qinfo="" Write "Failed to create MSMQQueueInfo",! Quit
	Set qinfo.PathName=$p(pQueue,"_",1)_"_Response"
	;
	Set qpub=qinfo.Open(1, 0)
	Set msg=qpub.Receive(,,,10000)
	Write !,msg.Body,!
	;
	Set qpub=qinfo.Open(1, 0)
	Set msg=qpub.Receive(,,,10000)
	Write msg.Body,!
	Do qpub.Close()
	Quit }
zSendMail(pApplication,pFrom) public {
	Set tSMTP=##class(%Net.SMTP).%New()
	Set tSMTP.smtpserver="192.9.200.1"
	Set tMail=##class(%Net.MailMessage).%New()
	Set tMail.Charset="iso-8859-1"
	Set tMail.From=$g(pFrom)
	Set tMail.Subject="LoanApplication:"_$g(pApplication,"100000:mo_mail:123456789:USA")
	Do tMail.To.Insert("testjsl@intersys.com")
	Do tMail.TextData.Write("The body is not used for the application purposes.")
	Set tSC=tSMTP.Send(tMail) If 'tSC Do $system.OBJ.DisplayError(tSC) Quit
	Write "Loan application is sent successfully.",!
	Quit }
zSendRandomData(pMode="term",pCount=1,pDelay=10) public {
	Set tSC=..TestStart() Quit:('tSC)
	If pMode="term" {
		Set tSC=##class(Ens.Director).CreateBusinessService("Demo.Loan.FindRateTerminalService",.tBS)  Quit:('tSC)
	} Else { Set tSC=1 }
	For tI=1:1:pCount {
		If tI>1 Hang $random(pDelay+1)
		Set tInput=..RandomRequest()
		Set tMode=pMode If tMode="all" Set tMode=$case($r(4), 0:"term", 1:"file", 2:"tcp", 3:"mail")
		Write !,"Request #",tI,": ",tInput," sent by ",tMode,!
		If tMode="term" {
			If '$Data(tBS) Set tSC=##class(Ens.Director).CreateBusinessService("Demo.Loan.FindRateTerminalService",.tBS)  Quit:('tSC)
			Set tSC=tBS.ProcessInput(##class(Ens.StringContainer).%New(tInput),.tOutput)  Quit:('tSC)
			Continue
		} Else { Kill tBS }
		If tMode="file" Do $zf(-1,"echo "_tInput_">C:\Practice\loan\in\random_"_$tr($zdt($H,8)," :","_")_".application") continue
		If tMode="tcp"  Do ..SendTCP(tInput,1234) Continue
		If tMode="mail" Do ..SendMail(tInput,$g(^MyEmailAddress)) continue
		If tMode="msmq" Do ..SendMSMQ(tInput,".\private$\FindRate_Request") Continue
		If tMode="mqseries" Do ..SendMQSeries(tInput,"postcard") Continue
	}
	If ('tSC) Do $System.Status.DisplayError(tSC) }
zSendTCP(pApplication,pPort=1234) public {
	Set tDevice="|TCP|"_pPort
	Open tDevice:("127.0.0.1":pPort:"ST"):2
	If $Test=0 Write "can not open TCP device '"_tDevice_"'" Quit
	;
	Use tDevice
	Set pApplication=$g(pApplication,"100000:mo_tcp:123456789:USA")
	;
	Write pApplication_$C(13,10),*-3
	;
	Read tOutput
	;
	Close tDevice
	Write tOutput
	Quit }
zTest() public {
	Set tSC=..TestStart()
	If 'tSC Do $system.Status.DisplayError(tSC) Quit
	Set tSC=##class(Ens.Director).CreateBusinessService("Demo.Loan.FindRateTerminalService",.tBusinessService)
	If ('tSC) Do $system.OBJ.DisplayError(tSC) Quit
	For {
		Read !,"amount:name:taxid:nationality>",tInput,! Quit:tInput=""
		Set tSC=tBusinessService.ProcessInput(##class(Ens.StringContainer).%New(tInput),.tOutput)
		If 'tSC Do $system.Status.DisplayError(tSC) Continue
		;Write !,tOutput.StringValue
	}
	Set tBusinessService = ""
	Do ..Stop()
	Quit }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","FindRateProduction","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
