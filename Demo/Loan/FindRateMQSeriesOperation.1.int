ROUTINE Demo.Loan.FindRateMQSeriesOperation.1 [Type=INT, Generated]
 ;Demo.Loan.FindRateMQSeriesOperation.1
 ;(C)InterSystems, generated for class Demo.Loan.FindRateMQSeriesOperation.  Do NOT edit. 06/25/2018 11:32:50AM
 ;;4147322F;Demo.Loan.FindRateMQSeriesOperation
 ;
zGetRequestClassList() public {
 Set tList=""
 Set tList=tList_$lb("Demo.Loan.Msg.SendReply")
 Quit tList }
zGetResponseClassList(pRequest="") public {
 If pRequest="Demo.Loan.Msg.SendReply" Quit $lb("Ens.Response")
 If pRequest="" Quit $lb("Ens.Response")
 Quit "" }
zGetSettingRow(pSettingName="",pSourceClass="") public {
	Set tRow = ""
	// Check if the class has been compiled with the new generator
	If (pSourceClass = "Demo.Loan.FindRateMQSeriesOperation") {
		Set tRow = $case(pSettingName,
			"AlertGroups": $LB("AlertGroups","The Alert Groups to which this item belongs.","%Library.String","",2500,"","","","",0,"Alert Groups","Alerting","Alerting Control","selector?multiSelect=1&context={Ens.ContextSearch/ProductionAlertGroups?productionName=@productionId}"),
			"AlertOnError": $LB("AlertOnError","Send an Alert message whenever an error occurs here","%Library.Boolean",0,"","","","","",0,"Alert On Error","Alerting","Alerting Control",""),
			"AlertRetryGracePeriod": $LB("AlertRetryGracePeriod","When AlertOnError is True, and the Operation is retrying,"_$char(13,10)_"refrain from alerting if the Operation succeeds within this number of seconds after an error","%Library.Numeric",0,"",0,"","","",0,"Alert Retry Grace Period","Alerting","Alerting Control",""),
			"ArchiveIO": $LB("ArchiveIO","If set, the Adapter will log in the Ensemble I/O archive each input and output communication it has with its external system.","%Library.Boolean",0,"","","","","",0,"Archive IO","Dev","Development and Debugging",""),
			"BusinessPartner": $LB("BusinessPartner","Name of a Business Partner Profile associated with this item","%Library.String","",128,"","","","",0,"Business Partner","Info","Informational Settings","partnerSelector"),
			"FailureTimeout": $LB("FailureTimeout","Total number of seconds to keep trying to deliver the message. <br>"_$char(13,10)_"After this number of seconds has elapsed, the business operation discards the message data and returns an error code. <br>"_$char(13,10)_"To ensure that no message is ever skipped, enter a Failure Timeout value of -1, which means 'Never time out'. <br>"_$char(13,10)_"Use a setting of -1 when complete data delivery is critical, for example in health care applications. ","%Library.Numeric",15,"",-1,"","","",0,"Failure Timeout","Additional","Additional Settings",""),
			"InactivityTimeout": $LB("InactivityTimeout","Send an Alert message if this number of seconds elapses with no messages being processed by this item. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Inactivity Timeout","Alerting","Alerting Control",""),
			"QueueCountAlert": $LB("QueueCountAlert","Number of messages on this item's queue needed to trigger an Alert message to be sent. Note that no further"_$char(13,10)_"alerts will be sent unless the number of messages on the queue drops below 80% of this number and then rises again to this number. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Count Alert","Alerting","Alerting Control",""),
			"QueueWaitAlert": $LB("QueueWaitAlert","The number of seconds a message at the front of the queue may have waited since being queued before an alert is triggered.<br/>"_$char(13,10)_"Only one alert will be raised per host item per sequential trigger of the queue wait threshold. <br/>"_$char(13,10)_"Note that this alert will be sent even if AlertOnError is False. <br/>"_$char(13,10)_"Zero means no alerts of this type will be sent.","%Library.Numeric",0,"",0,"","","",0,"Queue Wait Alert","Alerting","Alerting Control",""),
			"ReplyCodeActions": $LB("ReplyCodeActions","<p>A comma-separated list of codes specifying what action this Operation will take on various reply status conditions. "_$char(13,10)_"The format of the list is: <br/> &lt;code&gt;=&lt;actions&gt;,(&lt;code&gt;,&lt;code&gt;)=&lt;actions&gt;,...<br/>"_$char(13,10)_"Types of reply status condition are identified by a specification code:"_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>E</b> - Error status returned from message handler</li>"_$char(13,10)_"<li><b>E#&lt;statuscode&gt;</b> - Error status returned from message handler has status code equal to &lt;statuscode&gt;</li>"_$char(13,10)_"<li><b>E*&lt;text&gt;</b> - Error status returned from message handler contains text string &lt;text&gt;</li>"_$char(13,10)_"<li><b>X</b> - there is no reply message at all</li>"_$char(13,10)_"</ul></p>"_$char(13,10)_"<p>The following values for &lt;actions&gt; may be used alone or in combinations: "_$char(13,10)_"<ul style=""list-style-type: none;"">"_$char(13,10)_"<li><b>C</b> - Treat the message as Completed OK.</li>"_$char(13,10)_"<li><b>W</b> - Log a warning. If no other non-warning &lt;actions&gt; are triggered, the message will be treated as Completed OK.</li>"_$char(13,10)_"<li><b>R</b> - Retry the message according to the configured RetryInterval and FailureTimeout; finally Fail unless a "_$char(13,10)_"different action is also specified.</li>"_$char(13,10)_"<li><b>S</b> - Suspend the message, log an error, and move on to try the next message.</li>"_$char(13,10)_"<li><b>D</b> - Disable the Operation, log an error and restore the message to the front of the Operation's queue.</li>"_$char(13,10)_"<li><b>F</b> - Fail with an error and move on to try the next message from the Operation's queue.</li></ul>"_$char(13,10)_"An example of a valid ReplyCodeActions specification is 'E#6301=R,E#&lt;Ens&gt;ErrGeneral=RD,E=F'. This specification will result in a "_$char(13,10)_"retry when error code 6301 is encountered. When error code &lt;Ens&gt;ErrGeneral is encountered, the Operation first retries to send "_$char(13,10)_"the message until FailureTimeout and then, if the error continues, it disables the Operation instead of failing. Any other errors will "_$char(13,10)_"cause the Operation to fail processing of the current message and return the error status to the caller, without retrying first.</p>"_$char(13,10)_"<p><b>The default behavior is 'E=F'.</b> Thus any error status will result in the error being logged and returned to the caller,"_$char(13,10)_"no retries will be attempted, and the Operation will move on to try the next message from its queue.</p>"_$char(13,10)_"<p>All codes where &lt;actions&gt; consists of only 'W' (for 'log a Warning') will be evaluated, and a warning will be"_$char(13,10)_"generated for each matching &lt;code&gt;. Other &lt;code&gt; values will be evaluated in left-to-right order, executing the"_$char(13,10)_"first matching &lt;code&gt; that has a non-warning &lt;actions&gt; value. As noted in the details for the 'W' flag, an error"_$char(13,10)_"that only triggers 'W' &lt;actions&gt; will be treated as Completed OK.</p>","%Library.String","",1000,"","","","",0,"Reply Code Actions","Additional","Additional Settings",""),
			"RetryInterval": $LB("RetryInterval","How frequently to retry access to the output system","%Library.Numeric",5,"",0,"","","",0,"Retry Interval","Additional","Additional Settings",""),
			"SendSuperSession": $LB("SendSuperSession","<p>Flag whether the  %SuperSession property ought to be included in the outbound message.</p>"_$char(13,10)_"<p>Including the Super Session in the outbound message depends on the transport mechanism.</p>"_$char(13,10)_"<p>Ensemble supports automatically including the %SuperSession in the HTTP Headers for"_$char(13,10)_"both the HTTP and SOAP Outbound Adapters based on this setting.</p>"_$char(13,10)_"<p>For other transport mechanisms custom code can call the host operation API: <METHOD>IncludeSuperSession</METHOD>(.tSC)"_$char(13,10)_"and then use as appropriate the host property value of <PROPERTY>%SuperSession</PROPERTY> if IncludeSuperSession"_$char(13,10)_"API returns true.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API returns true if the operation ought to send a super session based on this"_$char(13,10)_"host setting of SendSuperSession and the %SuperSession property is not empty.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will populate the host property <PROPERTY>%SuperSession</PROPERTY>"_$char(13,10)_"with either a generated Super Session or leave it with the Super Session passed to it with the request.</p>"_$char(13,10)_"<p>The IncludeSuperSession() API will return false if either SendSuperSession"_$char(13,10)_"is false or there was an error generating the super session (tSC will be populated accordingly).</p>"_$char(13,10)_"Example use in custom adapter Code: <br>"_$char(13,10)_"<pre>"_$char(13,10)_"#dim tSC As %Status = $$$OK"_$char(13,10)_"If ..BusinessHost.IncludeSuperSession(.tSC) {"_$char(13,10)_" /*"_$char(13,10)_"	  code to include ..BusinessHost.%SuperSession in output"_$char(13,10)_"	  based on transport mechanism."_$char(13,10)_" */	"_$char(13,10)_"}</pre>"_$char(13,10)_"<p>See also Host methods <method>GenerateSuperSession</method> and <method>OnGenerateSuperSession</method></p>","%Library.Boolean","","","","","","",0,"Send SuperSession","Additional","Additional Settings",""),
			"ThrottleDelay": $LB("ThrottleDelay","Duration of forced idleness before processing the next message, in milliseconds","%Library.Numeric",0,"","","","","",0,"Throttle Delay","Additional","Additional Settings",""),
			: "")
	}
	Else { // Fall back on getting the data dynamically 
		Set tRow = ..GetDynamicSettingRow(pSettingName,pSourceClass)
	}
	Quit tRow }
zMQSeriesSendReply(pRequest,pResponse) public {
	Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("user",$classname(),"MQSeriesSendReply","write to mqseries")
	Set tSC=..Adapter.SendMessage(pRequest.Text)
	Quit tSC }
zMessageHandler(pRequest,pResponse) public {
 Set $ZT="Trap",$EC="",tSC=1
 do {
 If pRequest.%IsA("Demo.Loan.Msg.SendReply") {
  Do:..ArchiveIO ..NewIOLogEntry(0,1,"","MQSeriesSendReply",..%SessionId,pRequest)
  Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="MQSeriesSendReply",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Set tSC=..MQSeriesSendReply(.pRequest,.pResponse)
  Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
  Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","MQSeriesSendReply() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
  Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",$G(pResponse))
  Quit
 }
 Do:..ArchiveIO ..NewIOLogEntry(0,1,"","OnMessage",..%SessionId,pRequest)
 Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="OnMessage",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Set tSC=..OnMessage(.pRequest,.pResponse)
 Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%Method")="",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,..%ConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
 Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHandler","OnMessage() returned with status "_$$getAllErrorTexts^EnsUtil(tSC)_", Retry="_..Retry_", SuspendMessage="_..SuspendMessage_", DeferResponse="_..DeferResponse_", Response="_$S('($Data(pResponse)#2&&$IsObject(pResponse)):"", 1:pResponse_"/"_$S('pResponse.%Extends("%Persistent"):"", 1:pResponse.%Id())))
 Do:$IsObject(..IOLogEntry) ..CloseIOLogEntry(tSC,"",pResponse)
 } While 0
Exit
 If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after BO MessageHandler method; committing before proceeding")
 Quit tSC
Trap
 Set $ZT="",tSC=##class(Ens.Util.Error).ExceptionStatus()
 Goto Exit }
zMessageHeaderHandler(pRequestHeader,pResponseHeader) public {
	Set $EC="",(tSC,tSCSuspend)=1, tAborted=0, pResponseHeader="", tDoAlert=""
	try {
		Set ..%RequestHeader=pRequestHeader, %Ensemble("CurrentHeaderId") = pRequestHeader.%Id()
		If pRequestHeader.MessageBodyClassName'="" {
			Set tRequest = $classmethod(pRequestHeader.MessageBodyClassName,"%OpenId",pRequestHeader.MessageBodyId,,.tSC)
			If '$IsObject(tRequest) Set tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","Could not open MessageBody "_pRequestHeader.MessageBodyId_" for MessageHeader #"_pRequestHeader.%Id()_" with body class "_pRequestHeader.MessageBodyClassName_":"_$$getAllErrorTexts^EnsUtil(tSC))  Quit
		} Else {
			Set tRequest="", tSC=$$Error^%apiOBJ("<Ens>ErrGeneral","No MessageBody classname for MessageHeader #"_pRequestHeader.%Id())  Quit
		}
		Do ##class(Ens.Util.Statistics).InitStats(..%ConfigName)
		Set tConfigName = ..%ConfigName, tResponse = ""
		Do pRequestHeader.SetStatus(3)
		Set (..%SessionId,%Ensemble("SessionId")) = pRequestHeader.SessionId
		Set ..%SuperSession=pRequestHeader.SuperSession
		Set (tEndTime,..%LastReportedError)="", ..RetryCount=1, (..Retry,..SuspendMessage,..DeferResponse,..%AlertStartTime,tFailureTimedOut,tTerminate)=0
		While 1 { ; Retry loop
			Set tTimeCalled=$ZH, tDoAlert=""
			Set:'tEndTime tEndTime = tTimeCalled + ..FailureTimeout
			If $D(^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())) {
				Kill ^Ens.Runtime("CrashedMessage",pRequestHeader.%Id())
				Set tSC=##class(Ens.Util.Error).EnsError($classname(),"MessageHeaderHandler","<Ens>ErrPreviouslyCrashedMessage",pRequestHeader.%Id())
			} Else {
				Set tSC=..MessageHandler(tRequest,.tResponse)
			}
			If ('tSC) {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError R")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() R; committing before proceeding")
			}
			Set $EC=""  try {
				Set tMHSC=tSC
				Set tAction=..OnGetReplyAction(tRequest,.tResponse,.tSC)
				Set:""'=tAction tSC=..doReplyAction(tAction, tRequest,.tResponse,tSC)
				If tSC'=tMHSC&&('tSC) {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError A")
					Set tDoAlert=..OnError(.tSC)
				}
			} catch {
				Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
			}
			If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after ReplyAction OnError() A; committing before proceeding")
			If ..SuspendMessage {
				Set tSCSuspend=tSC
				Set tSC=$$Error^%apiOBJ("<Ens>ErrSuspending",pRequestHeader.%Id(),$$getAllErrorTexts^EnsUtil(tSC))
				Quit
			}
			Quit:..DeferResponse
			Quit:'..Retry
			Set ..Retry=0
			If ('tSC) {
				Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
				Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
				If ..%AlertStartTime {
					If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
						Set ..%AlertStartTime=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					} Else {
						Set tDoAlert=0
						If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
						Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					}
				} Else {
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
					Else { Set tDoAlert=0 }
				}
				Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
				Set tDoAlert=0
			} Else { Set ..%AlertStartTime=0, tTxt="" }
			Set ..%LastReportedError=tTxt
			If ..%QuitTask { Set tTerminate=1 }
			Else {
				If ..FailureTimeout'=-1 {
					Set tNow=$ZH
					If ..NoFailWhileDisconnected {
						try { Set tStayConnected=..Adapter.StayConnected }
						catch { Set tStayConnected=1 }
						If tStayConnected {
							try { Set tConnected=..Adapter.Connected }
							catch { Set tConnected=1 }
							If 'tConnected {
								If tNow>tEndTime Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Ignoring FailureTimeout while disconnected")
								Set:$G(tLast) tEndTime=tEndTime+(tNow-tLast) ; keep up with our disconnected time
								Set tLast=tNow
							} ElseIf $G(tLast) {
								Set tMinInterval=..RetryInterval+1  Set:..FailureTimeout<..RetryInterval&&(..FailureTimeout>0) tMinInterval=..FailureTimeout+1
								If tEndTime-tNow<tMinInterval Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Extending FailureTimeout by "_(tNow+tMinInterval-tEndTime)_" after reconnecting")  Set tEndTime=tNow+tMinInterval
								Kill tLast
							}
						}
					}
					If tNow>tEndTime {
						Set tFailureTimedOut=1, tSC=$$Error^%apiOBJ("<Ens>ErrFailureTimeout", ..FailureTimeout, $$getAllErrorTexts^EnsUtil(tSC), $classname()), tDoAlert=""
						Set $EC=""  try {
							Set tMHSC=tSC
							Set tDoDefault=..OnFailureTimeout(tRequest,.tResponse,.tSC)
							Set:tDoDefault tSC=$S(""=tAction:tSC,1:..finalReplyAction(tAction,tSC,1))
							Set:tSC'=tMHSC&&('tSC) tDoAlert=""
						} catch {
							Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=""
						}
						If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnFailureTimeout(); committing before proceeding")
						Set:..SuspendMessage tSCSuspend=tSC
						Quit:'..%QuitTask
					}
				}
				If ..%QuitTask { Set tTerminate=1 }
				Else {
					Set ^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%Status")="Retry",^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Retry",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
					Set tWaitTime = tTimeCalled + ..RetryInterval - $ZH
					Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,$S(tWaitTime<0:0, 1:tWaitTime),,0)  If ('tSC1) Set tSC=$select(+tSC:tSC1,1:$$AppendStatus^%occSystem(tSC,tSC1))  Quit
					Set tTerminate=##class(Ens.Job).ShouldTerminate()
				} ; %QuitTask
			} ; %QuitTask
			Set tSBQ=##class(Ens.Job).ShouldBeQuiescent()
			If tSBQ || tTerminate {
				If pRequestHeader.Priority>2||tTerminate {
					Set tTerminate=1
					If 'tFailureTimedOut||(..%QuitTask>1) {
						If pRequestHeader.TargetQueueName="" {
							/* 
								If no target queue name then we cannot put back to queue.
								Double check invocation InProc and mark so we will RecoverActiveMessage() later			
							*/
							If pRequestHeader.Invocation=2 {
								If $Data(^Ens.ActiveMessage("sys"_":"_$Job),tActiveID) {
									Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing corresponding Active Message:"_tActiveID_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))								
									Set tSCActive = ##class(Ens.Job).RecoverActiveMessage(tActiveID,$Job,0)
									If (''tSCActive) Kill ^Ens.ActiveMessage("sys"_":"_$Job)
								} Else {
									Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue corresponding Active Message since it is not defined"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
								}
							} Else {
								Do ##class(Ens.Util.Log).LogError($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; cannot re-queue since no target queue name and not InProc"_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
							}
						} Else {
							Set tSCx=tSC, tSC=##class(Ens.Queue).PutBackToQueue(pRequestHeader)
							Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; re-queueing"_$S((''tSCx):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSCx)))
						}
					} Else {
						Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Retry loop exited due to shutdown request for message "_..%RequestHeader.%Id()_" ; quitting with status "_$$getAllErrorTexts^EnsUtil(tSC))
					}
					Quit
				}
				Do ##class(Ens.Util.Log).LogInfo($classname(),"MessageHeaderHandler","Ignoring "_$S(tSBQ:"Quiescent",1:"Terminate")_" request while processing high priority (i.e. synchronous) request "_..%RequestHeader.%Id())
			}
			If ##class(Ens.Job).ShouldAbort() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_..%RequestHeader.%Id()_" aborted as requested by signal for job "_$J_$S((''tSC):"",1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, tAborted=1
				Quit
			}
			If ##class(Ens.Job).ShouldSuspend() {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Message "_pRequestHeader.%Id()_" suspended as requested by signal for job "_$J_$S((''tSC):"", 1:" - original error: "_$$getAllErrorTexts^EnsUtil(tSC)))
				Set tSC=1, ..SuspendMessage=1
				Quit
			}
			Set ..RetryCount=..RetryCount+1
			Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")=..RetryCount,^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Retrying Request Header Id "_pRequestHeader.%Id()_" - try #"_..RetryCount)
		} ; Retry loop
		Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Retry")="",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If ('tSC) {
			If ""=tDoAlert {
				Set $EC=""  try {
					Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","calling OnError E")
					Set tDoAlert=..OnError(.tSC)
				} catch {
					Set tSC=$select(+tSC:##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"),1:$$AppendStatus^%occSystem(tSC,##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"))), tDoAlert=1
				}
				If $TLevel>0 Set tTL=$TLevel  While $TLevel>0 { TCommit } Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",tTL_" open user transaction"_$S(tTL>1:"s",1:"")_" found after OnError() E; committing before proceeding")
			}
			Quit:'..SuspendMessage&&'..DeferResponse
		}
		Quit:tTerminate
		Set tConfigName=..%ConfigName
		Set tUTCH=$ztimestamp If $I(^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%Count")),$I(^CacheTemp.EnsHostCounter($namespace,tConfigName,+tUTCH,$P(tUTCH,",",2)\10)) {} Set ^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%Status")="OK",^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If $I(^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Count")) {} Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="OK",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		If tAborted {
			Do pRequestHeader.SetStatus(7)
			Quit
		}
		If ..SuspendMessage {
			Do pRequestHeader.SetStatus(5)
			If ('tSC) {
				If ('tSCSuspend) { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
				Else { Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler",$$GetOneStatusText^%apiOBJ(tSC)) }
			}
			Set tSC=1
			Quit
		}
		If ..DeferResponse {
			Do pRequestHeader.SetStatus(6)
			If ('tSC) {
				Do ##class(Ens.Util.Log).LogWarning($classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id()_"; Operation returned error "_$$getAllErrorTexts^EnsUtil(tSC))
				Set tSC=1
			} Else {
				Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"MessageHeaderHandler","Deferring Response to Request "_pRequestHeader.%Id())
			}
			Quit
		}
		Do pRequestHeader.SetStatus(9)
		If (''tSC) && pRequestHeader.needsReply() {
			Set tSC=pRequestHeader.NewResponseMessage(.pResponseHeader,tResponse,..%SuperSession)
		}
	} catch {
		Set tSC=##class(Ens.Util.Error).EnsSystemError($classname(),"MessageHeaderHandler"), tDoAlert=1
	}
	If ('tSC) {
		Set:(tDoAlert="") tDoAlert = ..OnError(tSC)
		Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
		If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"MessageHeaderHandler",tSC) }
		Set ..%LastReportedError=tTxt
		Set tConfigName=..%ConfigName
		Set ^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
		Do:'tAborted pRequestHeader.SetStatus(8)
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
	} ElseIf ..SuspendMessage&&('tSCSuspend) {
		Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSCSuspend))))
	}
	Set ..%SessionId=""
	Set ..%SuperSession=""
	Do ##class(Ens.Util.Statistics).RecordStats(3,..%ConfigName)
	Kill %Ensemble("SessionId")
	Kill %Ensemble("CurrentHeaderId")
	Set ..%RequestHeader=""
	Quit tSC
cleanNum(str)
	Set f=0  For { Set f=$F(str,"#",f)  Quit:'f
		For i=f:1 { Quit:$E(str,i)'?1N  Set $E(str,i)="",i=i-1 }
	}
	Quit str }
zOnKeepalive(pAdapterStatus) public {
	Set tSC=pAdapterStatus
	If ('tSC) {
		Do:$S($D(%Ensemble("DoTrace")):%Ensemble("DoTrace"),1:##class(Ens.Util.Trace).DoTrace()) ##class(Ens.Util.Trace).WriteTrace("system",$classname(),"OnKeepalive","calling OnError K")
		Set tDoAlert=..OnError(.tSC)
		If ('tSC) {
			Set tTxt=$P($$getAllErrorTexts^EnsUtil(tSC)," -- ") ; strip off "logged as" varying text
			Set:'..%AlertStartTime&&..AlertOnError&&..AlertRetryGracePeriod&&(tTxt'=..%LastReportedError) ..%AlertStartTime=$ZH
			If ..%AlertStartTime {
				If $ZH>=(..%AlertStartTime+..AlertRetryGracePeriod) {
					Set ..%AlertStartTime=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Alerting at expiration of retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				} Else {
					Set tDoAlert=0
					If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogError($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
					Else { Do ##class(Ens.Util.Log).LogInfo($classname(),"OnKeepalive","Not Alerting during retry grace period ("_..AlertRetryGracePeriod_") for "_tTxt) }
				}
			} Else {
				If tTxt'=..%LastReportedError { Do ##class(Ens.Util.Log).LogStatus($classname(),"OnKeepalive",tSC) }
				Else { Set tDoAlert=0 }
			}
			Do:tDoAlert&&..AlertOnError ..SendAlert(##class(Ens.AlertRequest).%New($LB(..%ConfigName,$$getAllErrorTexts^EnsUtil(tSC))))
			Set tConfigName=..%ConfigName
			Set ^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%Status")="Error",^CacheTemp.EnsHostMonitor($namespace,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set ^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%Status")="Error",^CacheTemp.EnsJobMonitor($namespace,"sys"_":"_$Job,tConfigName,"%LastActivity")=$zdatetime($ztimestamp,3,,3)
			Set:'..%QuitTask tSC=1
		} Else { Set ..%AlertStartTime=0, tTxt="" }
	} Else { Set ..%AlertStartTime=0, tTxt="" }
	Set ..%LastReportedError=tTxt
	Quit tSC }
zfinalReplyAction(pAction,pSC,pFixError) public {
	If pAction["S" {
		Set ..SuspendMessage=1, tActionDesc="Suspending on"
	} ElseIf pAction["D" {
		Set:($ZS<(2**31)) $ZS=(2**31)
		Set tActionDesc="Disabling on"
		Do ##class(Ens.Job).Stop($Job)
		Do ##Class(Ens.Director).EnableConfigItem(..%ConfigName,0,0)
		Do ..SendRequestAsync("Ens.ScheduleHandler","")
		Set ..%QuitTask=1+(pAction'["F"), ..Retry=1 ; we are quitting but the retry flag will force us to requeue the current message
	} ElseIf pAction["F" {
		// No work required here ; just quit with error
		Set tActionDesc="Discarding message on"
		Set ..SuspendMessage=0
	} Else { ; ??
		Do ##class(Ens.Util.Log).LogWarning($classname(),"finalReplyAction",$$getAllErrorTexts^EnsUtil(pSC))
		Set pSC=1, pFixError=0
	}
	Set:pFixError pSC=$$Error^%apiOBJ("<Ens>ErrGeneral",tActionDesc_" "_$$getAllErrorTexts^EnsUtil(pSC))
	Quit pSC }
zEnumerateSettingsGetInfo(colinfo,parminfo,idinfo,qHandle,extoption=0,extinfo) public {
	Set colinfo=$lb($lb("Name",10,"Name"),$lb("Description",10,"Description"),$lb("Type",10,"Type"),$lb("Default",10,"Default"),$lb("MAXLEN",10,"MAXLEN"),$lb("MINVAL",10,"MINVAL"),$lb("MAXVAL",10,"MAXVAL"),$lb("VALUELIST",10,"VALUELIST"),$lb("DISPLAYLIST",10,"DISPLAYLIST"),$lb("IsRequired",10,"IsRequired"),$lb("LocalizedName",10,"LocalizedName"),$lb("Category",10,"Category"),$lb("LocalizedCategory",10,"LocalizedCategory"),$lb("EditorContext",10,"EditorContext"))
	Set parminfo=""
	Set idinfo=$lb(0,"")
	If extoption {
		Set extinfo=$lb("",$lb($lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("",""),$lb("","")))
	}
	Quit 1 }
zEnumerateSettingsGetODBCInfo(colinfo,parminfo,qHandle) public {
	set version = $Select($Get(%protocol,41)>40:4,1:3)
	Set metadata=$lb(1,14,"Name",12,50,0,2,"Name","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Description",12,50,0,2,"Description","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Type",12,50,0,2,"Type","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Default",12,50,0,2,"Default","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXLEN",12,50,0,2,"MAXLEN","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MINVAL",12,50,0,2,"MINVAL","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"MAXVAL",12,50,0,2,"MAXVAL","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"VALUELIST",12,50,0,2,"VALUELIST","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"DISPLAYLIST",12,50,0,2,"DISPLAYLIST","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"IsRequired",12,50,0,2,"IsRequired","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedName",12,50,0,2,"LocalizedName","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"Category",12,50,0,2,"Category","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"LocalizedCategory",12,50,0,2,"LocalizedCategory","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),"EditorContext",12,50,0,2,"EditorContext","FindRateMQSeriesOperation","Demo_Loan","",$c(0,0,0,0,0,0,0,0,0,0,0,0),0)
	Set colcount=$li(metadata,2),cmdlen=colcount*10,parmcount=$li(metadata,3+cmdlen),pmdlen=parmcount*6,parminfo=$li(metadata,cmdlen+3,cmdlen+pmdlen+3)
	If version=4 {
		Set colinfo=$li(metadata,2,2+cmdlen)
	} Else {
		Set colinfo=$li(metadata,2,2)
		For i=0:1:colcount-1 Set colinfo=colinfo_$list(metadata,3+(i*10),11+(i*10))
	}
	Quit 1 }
